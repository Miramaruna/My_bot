
import sqlite3, random, time, asyncio

from aiogram import F, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, CallbackQuery, BotCommand
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import ChatMemberUpdatedFilter

from aiogram import types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ContentType, ChatMemberUpdated
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ChatMemberStatus

from app.keyboard import *
from app.BD import *
from bot import *

router = Router()
fm_t = False
chat_id = None
admin = 5626265763

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################

@router.message(Command("start"))
async def start_bot(message: Message):
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n–≠—Ç–æ –±–æ—Ç –º–∏—Ä—É–Ω–∏üßë‚Äçüíª\n–¢—É—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞üìÅ\n–ò–≥—Ä–∞—Ç—åü§† - /play\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞üíä - /start\n–ü–æ–º–æ—â—åüò≠ - /help\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èü§î - /info,\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüòÄ - registr,\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏üë® - users,\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - /help_admin", reply_markup=keyboard_start)
    await message.delete()

@router.message(Command("fake"))
async def fake(message: Message):
    players = [
        564646546, 'Bot', 4, 1000000
    ]
    cursor.execute("INSERT INTO users(user_id, name, wins, cash) VALUES(?, ?, ?, ?)", (players))
    connection.commit()

class Calculator(StatesGroup):
    num2 = State()
    num = State()
    snak = State()

@router.message(F.text.in_({'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'}))
async def calculate(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ:")
    await state.set_state(Calculator.num)
    await message.delete()

@router.message(Calculator.num)
async def num1(message: Message, state: FSMContext):
    global num
    num = int(message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ:")
    await state.set_state(Calculator.num2)

@router.message(Calculator.num2)
async def snaki(message: Message, state: FSMContext):
    global num, num2
    num2 = int(message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞–∫:")
    await state.set_state(Calculator.snak)

@router.message(Calculator.snak)
async def vych(message: Message, state: FSMContext):
    global num, num2
    snak = message.text
    if snak == '-':
        otvet = num - num2
        await message.answer(f"–û—Ç–≤–µ—Ç - {otvet}")
        await state.clear()
    if snak == '+':
        otvet = num + num2
        await message.answer(f"–û—Ç–≤–µ—Ç - {otvet}")
        await state.clear()
    if snak == '*':
        otvet = num * num2
        await message.answer(f"–û—Ç–≤–µ—Ç - {otvet}")
        await state.clear()
    if snak == '/':
        otvet = num / num2
        await message.answer(f"–û—Ç–≤–µ—Ç - {otvet}")
        await state.clear()

@router.message(F.text == "register")
async def start_bot(message: Message):
    cursor.execute(f"SELECT user_id FROM users WHERE user_id = {message.from_user.id}")
    users = cursor.fetchall()
    if users == []:
        cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)",(message.from_user.id, message.from_user.first_name, 0, 500, None, None, None))
        connection.commit()
        await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!üëå")
        await message.reply(f"–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –∏–º–µ–Ω–µ–º {message.from_user.first_name}")
    else:
        await message.reply("–ê–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Çüòâ")
    await message.reply("–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!üòÑ")

@router.message(Command("help"))
async def help(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç –ø–æ–º–æ—á—å?\n–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞üìç - /start\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èü§î - /info \n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –æ–±—Ä–∞—â—è–π—Å—è –ø–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–µüòÑ - /help\n–ü—Ä–æ–ø–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ\n–ü—Ä–æ—Ñ–∏–ª—åüß©\n geeksüïµ\n registerüíª\n –∫–æ–ø–∞—Ç—åüí∞\n /transferüì≤\n –§–µ—Ä–º–∞üî´\n –ò–Ω–≤–µ–Ω—Ç–∞—Ä—åüìÅ\n /shopüè™\n/kazinoüé∞\n–¥–∞—Ç—å '—á–∏—Å–ª–æ'\n —É–¥–∞–ª–∏—Ç—å(—Å–æ–æ–±—â–µ–Ω–∏–µ)\n tradingüìà\n/start_game(–∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏)\n–ê—Ä–º–∏—èü™ñ\n–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É '/commands'", reply_markup=keyboard_start) 

@router.message(Command("commands"))
async def commands(message: Message):
    await message.answer("/start\n/info\n/help\ngeeks\nregister\n/play\n/–ø—Ä–æ—Ñ–∏–ª—å\n–∫–æ–ø–∞—Ç—å\n–§–µ—Ä–º–∞\n/transfer\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n/shop\n/kazino\n/ban\ndelete\n/ban_admin\n/–ø–µ—Ä–µ–¥–∞—á–∞\nusers\n–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\nArmy\n—Å—Ä–∞–∂–∞—Ç—å—Å—è\n–¥–∞—Ç—å\n—É–¥–∞–ª–∏—Ç—å\n/start_game\n/mailing\nadmin\n/add_admin\nstop")

@router.message(Command("info"))
async def info(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!‚úã\n–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–º –±–æ—Ç–µ\n–Ø–∑—ã–∫ –±–æ—Ç–∞ - python\n–ë–î - Sqlite3\n–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - aiogram3\nVersion == 2.2.2üí´", reply_markup=keyboard_info) 

@router.message(F.text == "geeks")
async def info(message: Message):
    await message.answer('–ù–∞—É—á–∏–ª—Å—è —è —ç—Ç–æ–º—É –≤ —É—á–µ–±–Ω–æ–º –º–µ—Å—Ç–µ GEEKS —ç—Ç–æ —Ö–æ—Ä–æ—à–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞ —Ç–∞–∫–∂–µ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä \n–ö–∞–∫ –¥–∏–∑–∞–π–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ç.–¥\n/start', reply_markup=keyboard_start) 

async def get_user_data(user_id):

    cursor.execute("SELECT name, wins, cash FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        return {'name': result[0], 'wins': result[1], 'cash': result[2]}
    return None

@router.message(F.text == "–ø—Ä–æ—Ñ–∏–ª—å")
async def info_profile(message : Message):
    user_id = message.from_user.id

    user_info = await get_user_data(user_id)

    if user_info:
        name = user_info['name']
        wins = user_info['wins']
        cash = user_info['cash']
    
    cursor.execute(F"SELECT user_id FROM admin WHERE user_id = {message.from_user.id}")
    a = cursor.fetchone()
    admin_id = a[0]

    if message.chat.type == 'private':
        await message.reply(f"–ò–º—è - {name},\nid - {message.from_user.id},\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ - {wins},\n–î–µ–Ω—å–≥–∏üíµ - {cash},\n–ù–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∫–∏ü§ó - {admin_id}")
    else:
        member = await message.chat.get_member(user_id)
        if member.status == ChatMemberStatus.MEMBER:
            role = "–û–±—ã—á–Ω—ã–π —Å–æ–≥—Ä—É–ø–Ω–∏–∫"
        elif member.status == ChatMemberStatus.ADMINISTRATOR:
            role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        elif user_id == admin:
            role = '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞'
        else:
            role = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"

        await message.reply(f"–ò–º—è - {name},\nid - {message.from_user.id},\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ - {wins},\n–î–µ–Ω—å–≥–∏üíµ - {cash},\n–ù–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∫–∏ü§ó - {admin_id},\n–†–æ–ª—å –≤ –≥—Ä—É–ø–ø–µ - {role}üë•")

@router.message(F.text == "users")
async def users(message: Message):
    cursor.execute(f"SELECT name, user_id, cash FROM users")
    useri = cursor.fetchall()
    connection.commit()
    if useri:
        response = "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_id, name, cash in useri:
            users = useri
            response += f"id - {user_id}, name - {name}, cash-{cash}\n"
    await message.reply(f"{response}")

class Delete(StatesGroup):
    id = State()

@router.message(Command("delete"))
async def delete(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–± —É–¥–∞–ª–∏—Ç—å –µ–≥–æüò®\n–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Delete.id) 

    @router.message(Delete.id)
    async def delete_accept(message: Message, state: FSMContext):
            cursor.execute(f"SELECT user_id FROM admin WHERE user_id = {message.from_user.id}")
            a = cursor.fetchone()
            admink = a[0]
            cursor.execute(f"SELECT user_id FROM users WHERE user_id = {message.text}")
            user = cursor.fetchone()
            connection.commit()
            try:
                if message.text != '–æ—Ç–º–µ–Ω–∞':
                    if admink != []:
                        if user != []:
                            if int(message.text) != admin:
                                cursor.execute("DELETE FROM users WHERE user_id = ?", (message.text,))
                                connection.commit()
                                await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!üò¢")
                                await bot.send_message(admin, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.text} —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º - {admink}!‚ùóÔ∏è")
                                await state.clear()
                            else:
                                await message.answer("–¢–´ —Å–ª–∏—à–∫–æ–º –≥–ª—É–ø–ø —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞üòÇ")
                                await bot.send_message(admin, f"–ù–∞ –≤–∞—Å –ø—ã—Ç–∞–ª–∏—Å—å –ø–æ–∫—É—à–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID - {admink}ü§¶‚Äç‚ôÇÔ∏è")
                                await state.clear()
                        else:
                            await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É!ü§¶‚Äç‚ôÇÔ∏è")
                    else:
                        await message.reply("–ù–µ–¥–∞—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ üòÇ")
                        await state.clear()
                else:
                    await message.answer("–û—Ç–º–µ–Ω–∞‚úÖ")
                    await state.clear()
            except BaseException as e:
                await message.reply("Error")
                print(e)

@router.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f"ID —Ñ–æ—Ç–∞: {message.photo[-1].file_id}")

@router.message(F.text == '–∫–æ–ø–∞—Ç—å')
async def kopat(message: Message):
        cursor.execute(f"SELECT user_id FROM users WHERE user_id = {message.from_user.id}")
        p = cursor.fetchone()
        if p != None:
            await message.reply(f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: 500üíµ")
            cursor.execute("UPDATE users SET cash = cash + ? WHERE user_id = ?", (500, message.from_user.id))
            connection.commit()
        else:
            await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á—Ç–æ–± –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–≥—Ä–æ–≤—É–π –≤–∞–ª—é—Ç—É!üôÇ")

@router.message(Command('transfer'))
async def transfer_pol(message: Message):

    try:
        args = message.text.split()
        if len(args) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /transfer <id –ø–æ–ª—É—á–∞—Ç–µ–ª—è> <—Å—É–º–º–∞> –ü—Ä–∏–º–µ—Ä /transfer id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 100")

        receiver_id = int(args[1])
        amount = float(args[2])

        cursor.execute("SELECT cash FROM users WHERE user_id = ?", (message.from_user.id,))
        sender_cash = cursor.fetchone()

        if sender_cash is None:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if sender_cash[0] < amount:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")

        cursor.execute("UPDATE users SET cash = cash - ? WHERE user_id = ?", (amount, message.from_user.id))
        cursor.execute("UPDATE users SET cash = cash + ? WHERE user_id = ?", (amount, receiver_id))

        await bot.send_message(receiver_id, f'–í–∞–º –Ω–∞—Å–ª–µ–Ω–æ {amount}')

        connection.commit()
        await message.reply("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        connection.rollback()
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################

@router.message(F.text.in_({"–§–µ—Ä–º–∞", "athvf", "—Ñ–µ—Ä–º–∞"}))
async def farm(message: Message):
    cursor.execute(f"SELECT user_id FROM farm WHERE user_id = {message.from_user.id}")
    us = cursor.fetchall()
    connection.commit()
    if us == []:
        await message.reply("–§–µ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞‚öîÔ∏è")
        await create_farm(message.from_user.id)
    else:
        cursor.execute(f"SELECT size FROM farm WHERE user_id = {message.from_user.id}")
        s = cursor.fetchone()
        cursor.execute(F"SELECT lvl FROM farm WHERE user_id = {message.from_user.id}")
        l = cursor.fetchone()
        connection.commit()
        size = s[0]
        lvl = l[0]
        await message.reply(f"--–§–µ—Ä–º–∞--\n–õ—é–¥–∏ - {size}\nlvl - {lvl}", reply_markup=arm_kb)

@router.callback_query(F.data == 'add')
async def add(callback: CallbackQuery):
    await callback.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    acc = await accept(callback.from_user.id)
    if acc == True:
        await callback.message.answer("50 –õ—é–¥–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ñ–µ—Ä–º—É‚úÖ")
        await add_people_farm(callback.from_user.id)
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

async def add_people_farm(idi):
        cursor.execute("UPDATE farm SET size = size + ? WHERE user_id = ?", (50, idi))
        cursor.execute("UPDATE users SET cash = cash - ? WHERE user_id = ?", (500, idi))
        connection.commit()

async def accept(idi):
    cursor.execute(F"SELECT cash FROM users WHERE user_id = {idi}")
    cash = cursor.fetchone()
    result = cash[0]
    connection.commit()
    if result > 500:
        acc = True
    else:
        acc = False
    return acc

@router.message(F.text.in_({'–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'bydtynfhm'}))
async def inven(message: Message):
    cursor.execute(f"SELECT phone FROM users WHERE user_id = {message.from_user.id}")
    p = cursor.fetchone()
    phone = p[0]
    cursor.execute(f"SELECT car FROM users WHERE user_id = {message.from_user.id}")
    c = cursor.fetchone()
    car = c[0]
    cursor.execute(f"SELECT house FROM users WHERE user_id = {message.from_user.id}")
    h = cursor.fetchone()
    house = h[0]
    connection.commit()
    await message.answer(f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n–ú–∞—à–∏–Ω–∞üöó - {car}\n–¢–µ–ª–µ—Ñ–æ–Ωüì± - {phone}\n–î–æ–ºüè† - {house}")

@router.message(Command('shop'))
async def shop(message: Message):
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ωüè™", reply_markup=shop_kb)

@router.message(F.text == '–ú–∞—à–∏–Ω—ã')
async def car(message: Message):
    await message.answer('–ö–∞–∫—É—é –º–∞—Ä–∫—É –∂–µ–ª–∞–µ—Ç–µ –∫—É–ø–∏—Ç—å?ü™á', reply_markup=car_kb)

class Car(StatesGroup):
    num = State()

@router.message(F.text == 'BMW')
async def car(message: Message, state: FSMContext):
    await message.reply("BMW BMW M5 (G30) - 104K. 1\nBMW 7 Series (G11) - 87K. 2\nBMW iX (I20) - 84K. 3\nBMW X7 (G07) - 75K. 4\nBMW M4 (G82) - 73K. 5\nBMW M3 (G80) - 73K. 6\nBMW 6 Series Gran Turismo (G32) - 65K. 7\nBMW X6 (G06) - 65K. 8\nBMW M2 (G87) - 62K. 9\nBMW X5 (G05) - 61K. 10\nBMW i4 (G26) - 55K. 11\nBMW 5 Series (G30) - 54K. 12\nBMW X4 (G02) - 52K. 13\nBMW Z4 (G29) - 49K. 14\nBMW X3 (G01) - 45K. 15\nBMW X2 (F39) - 44K. 16\nBMW 4 Series Coupe (G22) - 46K. 17\nBMW 3 Series (G20) - 42K. 18\nBMW X1 (U11) - 42K. 19\nBMW 2 Series Coupe (G42) - 40K. 20\n\n–ß—Ç–æ–± –∫—É–ø–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã\n–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Car.num)

    @router.message(Car.num, F.content_type == ContentType.TEXT)
    async def buy_car(message: Message, state: FSMContext):
        if message.text != '–æ—Ç–º–µ–Ω–∞':
            acc = await accept_car(message.text, message.from_user.id)
            if acc == True:
                cursor.execute(f"SELECT name FROM car WHERE id = {message.text}")
                n = cursor.fetchone()
                name = n[0]
                await get_car(message.text, message.from_user.id)
                await message.answer(f"–ú–∞—à–∏–Ω–∞ {name} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞!üöò")
                await state.clear()
            else:
                await message.answer('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ')
                await state.clear()
        else:
                await message.answer("–û—Ç–º–µ–Ω–∞!‚úÖ")
                await state.clear()

@router.message(F.text == 'Mercedes')
async def car(message: Message, state: FSMContext):
    await message.answer("Mercedes-AMG One - 2.7M.21\nMercedes-AMG GT Black Series - 325K.22\nMercedes-AMG G 63 4x4¬≤ - 250K.23\nMercedes-Maybach S 680 4MATIC - 230K.24\nMercedes-AMG S 63 E PERFORMANCE - 180K.25\nMercedes-Maybach GLS 600 4MATIC - 170K.26\nMercedes-Benz S-Class S 580 4MATIC - 120K.27\nMercedes-Benz GLE Coupe AMG 53 - 120K.28\nMercedes-Benz G-Class G 550 - 110K.29\nMercedes-AMG E 63 S 4MATIC+ - 107K.30\nMercedes-Benz EQS 580 4MATIC - 105K.31\nMercedes-Benz GLS 450 4MATIC - 100K.32\nMercedes-AMG CLS 53 4MATIC+ - 95K.33\nMercedes-Benz GLE 450 4MATIC - 76K.34\nMercedes-Benz E-Class E 450 4MATIC - 70K.35\nMercedes-Benz GLC 300 4MATIC - 55K.36\nnMercedes-AMG CLA 45 4MATIC+ - 55K.37\nMercedes-Benz C-Class C 300 - 45K.38\nMercedes-Benz A-Class A 220 - 35K.39\nMercedes-Benz GLA 250 - 40K.40\n–ß—Ç–æ–± –∫—É–ø–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã\n!!!!–¶–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä—Ö!!!\n1–¥–æ–ª–ª–∞—Ä - 1000\n–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Car.num)

    @router.message(Car.num, F.content_type == ContentType.TEXT)
    async def buy_car(message: Message, state: FSMContext):
        if message.text != '–æ—Ç–º–µ–Ω–∞':
            acc = await accept_car(message.text, message.from_user.id)
            if acc == True:
                cursor.execute(f"SELECT name FROM car WHERE id = {message.text}")
                n = cursor.fetchone()
                name = n[0]
                await get_car(message.text, message.from_user.id)
                await message.answer(f"–ú–∞—à–∏–Ω–∞ {name} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞!üöò")
                await state.clear()
            else:
                await message.answer('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ')
                await state.clear()
        else:
                await message.answer("–û—Ç–º–µ–Ω–∞!‚úÖ")
                await state.clear()

async def get_car(idi, idi2):
    cursor.execute(f"SELECT name FROM car WHERE id = {idi}")
    n = cursor.fetchone()
    name = n[0]
    cursor.execute(f"SELECT price FROM car WHERE id = {idi}")
    p = cursor.fetchone()
    price = p[0]
    cursor.execute(f"UPDATE users SET car = ? WHERE user_id = ?", (name, idi2))
    cursor.execute(f'UPDATE users SET cash = cash - ? WHERE user_id = ?', (price, idi2))
    connection.commit()

async def accept_car(idi, idi2):
    cursor.execute(f"SELECT price FROM car WHERE id = {idi}")
    p = cursor.fetchone()
    price = p[0]
    cursor.execute(f"SELECT cash FROM users WHERE user_id = {idi2}")
    c = cursor.fetchone()
    cash = c[0]
    connection.commit()
    if cash >= price:
        acc = True
    else:
        acc = False
    return acc

class Phone(StatesGroup):
    num = State()

@router.message(F.text == "–¢–µ–ª–µ—Ñ–æ–Ω—ã")
async def phone(message: Message, state:FSMContext):
    await message.reply("–¢–µ–ª–µ—Ñ–æ–Ω—ã:\niPhone 15 Pro Max - 40k.1\nSamsung Galaxy S24 Ultra - 40k.2\nGoogle Pixel 8 Pro - 39k.3\nHuawei Mate 60 Pro - 38k.4\nSony Xperia 1 V - 38k.6\nOnePlus 12 Pro - 37k.7\nXiaomi 14 Pro - 37k.8/nOppo Find X6 Pro - 37k.9\nVivo X100 Pro - 36k.10\nAsus ROG Phone 7 Ultimate - 36k.11\nMotorola Edge 40 Pro - 35k.12\nRealme GT5 Pro - 35k.13\nHonor Magic 6 Pro - 34k.14\\nZTE Axon 50 Ultra - 34k.15\nNubia Red Magic 8 Pro - 34k.16\niPhone 15 - 33k.17\nSamsung Galaxy S24 - 33k.18\nGoogle Pixel 8 - 33k.19\nXiaomi 14 - 32k.20\nOnePlus 12 - 32k.21\n–ß—Ç–æ–± –∫—É–ø–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã\n–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Phone.num)

@router.message(Phone.num)
async def buy_phone(message: Message, state:FSMContext):
        if message.text != '–æ—Ç–º–µ–Ω–∞':
            accepted = await accept_phone(message.text, message.from_user.id)
            if accepted == True:
                cursor.execute(f"SELECT name_phone FROM phone WHERE id = {message.text}")
                n = cursor.fetchone()
                name = n[0]
                await get_phone(message.text, message.from_user.id)
                await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω {name}, —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!üì±")
                await state.clear()
            elif accepted == False:
                await message.answer('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ')
                await state.clear()
        else:
                await message.answer("–û—Ç–º–µ–Ω–∞!‚úÖ")
                await state.clear()

async def get_phone(idi, idi2):
    cursor.execute(f"SELECT name_phone FROM phone WHERE id = {idi}")
    n = cursor.fetchone()
    name = n[0]
    cursor.execute(f"SELECT price FROM phone WHERE id = {idi}")
    p = cursor.fetchone()
    price = p[0]
    cursor.execute(f"UPDATE users SET phone = ? WHERE user_id = ?", (name, idi2))
    cursor.execute(f'UPDATE users SET cash = cash - ? WHERE user_id = ?', (price, idi2))
    connection.commit()

async def accept_phone(idi, idi2):
    cursor.execute(f"SELECT price FROM phone WHERE id = {idi}")
    p = cursor.fetchone()
    price = p[0]
    cursor.execute(f"SELECT cash FROM users WHERE user_id = {idi2}")
    c = cursor.fetchone()
    cash = c[0]
    if cash > price:
        acc = True
    else:
        acc = False
    return acc

class House(StatesGroup):
    num = State()

@router.message(F.text == '–î–æ–º–∞')
async def house(message: Message, state: FSMContext):
    await message.answer("–í–∏–ª–ª–∞ - 5M. 1\n–ü–æ–º–µ—Å—Ç—å–µ - 10M. 2\n–ö–æ—Ç—Ç–µ–¥–∂ - 1M. 3\n–î—É–ø–ª–µ–∫—Å - 600K. 4\n–¢–∞—É–Ω—Ö–∞—É—Å - 800K. 5\n–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º - 700K. 6\n–®–∞–ª–µ - 1.5M. 7\n–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ–º –¥–æ–º–µ - 500K. 8\n–õ–æ—Ñ—Ç - 700K. 9\n–°—Ç—É–¥–∏—è - 300K. 10\n–ú–æ–¥—É–ª—å–Ω—ã–π –¥–æ–º - 400K. 11\n–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä - 150K. 12\n–ë—É–Ω–≥–∞–ª–æ - 600K. 13\n–ü–µ–Ω—Ç—Ö–∞—É—Å - 3M. 14\n–ö–∞–±–∏–Ω–∫–∞ - 100K. 15\n–ë–∞—Ä–∞–∫ - 50K. 16\n–ö–æ—Ä–æ–±–∫–∞ - 30K. 17\n–ß—Ç–æ–± –∫—É–ø–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã\n–æ—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(House.num)

@router.message(House.num)
async def house_buy(message: Message, state: FSMContext):
    if message.text != '–æ—Ç–º–µ–Ω–∞':
        accepted = await accept_house(message.text, message.from_user.id)
        if accepted == True:
            cursor.execute(f"SELECT name FROM house WHERE id = {message.text}")
            n = cursor.fetchone()
            name = n[0]
            await get_house(message.text, message.from_user.id)
            await message.answer(f"–î–æ–º {name}, —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!üè†")
            await state.clear()
        elif accepted == False:
            await message.answer('–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ')
            await state.clear()
    else:
        await message.answer("–û—Ç–º–µ–Ω–∞!‚úÖ")
        await state.clear()

async def get_house(idi, idi2):
    cursor.execute(f"SELECT name FROM house WHERE id = {idi}")
    n = cursor.fetchone()
    name = n[0]
    cursor.execute(f"SELECT price FROM house WHERE id = {idi}")
    p = cursor.fetchone()
    price = p[0]
    cursor.execute(f"UPDATE users SET house = ? WHERE user_id = ?", (name, idi2))
    cursor.execute(f'UPDATE users SET cash = cash - ? WHERE user_id = ?', (price, idi2))
    connection.commit()

async def accept_house(idi, idi2):
    cursor.execute(f"SELECT price FROM house WHERE id = {idi}")
    p = cursor.fetchone()
    price = p[0]
    cursor.execute(f"SELECT cash FROM users WHERE user_id = {idi2}")
    c = cursor.fetchone()
    cash = c[0]
    if cash > price:
        acc = True
    else:
        acc = False
    return acc

################################################################################################################################################################
################################################################################################################################################################

@router.message(F.text.startswith('–¥–∞—Ç—å'))
async def give_currency(message: Message):
    if not message.reply_to_message:
        await message.reply("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç—å 100")
            return
        
        amount = int(parts[1])

        if amount <= 0:
            await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç—å 100")
        return

    from_user_id = message.from_user.id
    to_user_id = message.reply_to_message.from_user.id


    cursor.execute(F"SELECT cash FROM users WHERE user_id = {message.from_user.id}")
    c = cursor.fetchone()
    cash = c[0]
    if cash < amount:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return


    cursor.execute(F"UPDATE users SET cash = cash - {-amount} WHERE user_id = {from_user_id}")
    cursor.execute(F"UPDATE users SET cash = cash + {amount} WHERE user_id = {to_user_id}")

    await message.reply(f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.reply_to_message.from_user.full_name}.")
    await message.bot.send_message(
        to_user_id, f"–í–∞–º –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {amount} –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –æ—Ç {message.from_user.full_name}."
    )
    connection.commit()

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=True))
async def on_bot_added_to_group(message: Message, event: ChatMemberUpdated):
    if event.new_chat_member.status == "member":
        chat_id = event.chat.id
        await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É!")

@router.message(F.text == '—É–¥–∞–ª–∏—Ç—å')
async def delete_message_on_command(message: Message):
    member = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    if member.status == ChatMemberStatus.ADMINISTRATOR:
        if message.reply_to_message:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.reply_to_message.message_id)
            except Exception as e:
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        else:
            await message.reply("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.")
    else:
        await message.answer('–°—Ç–∞–Ω—å –∞–¥–º–∏–Ω–æ–º —Å–ø–µ—Ä–≤–∞üòí')

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################

@router.message(F.text.in_({'–ê—Ä–º–∏—è','–∞—Ä–º–∏—è','Army'}))
async def army(message: Message):
    cursor.execute(F"SELECT user_id FROM army WHERE user_id = {message.from_user.id}")
    u = cursor.fetchone()
    connection.commit
    if u == None:
        cursor.execute("INSERT INTO army(user_id, soldiers, cars, tanks) VALUES(?, ?, ?, ?)", (message.from_user.id, 10, 2, 1))
        connection.commit()
        await message.answer("–ê—Ä–º–∏—è —Å–æ–∑–¥–∞–Ω–∞!ü™ñ")
    else:
        cursor.execute(f"SELECT soldiers FROM army WHERE user_id = {message.from_user.id}")
        s = cursor.fetchone()
        soldiers = s[0]
        cursor.execute(f"SELECT cars FROM army WHERE user_id = {message.from_user.id}")
        c = cursor.fetchone()
        cars = c[0]
        cursor.execute(f"SELECT tanks FROM army WHERE user_id = {message.from_user.id}")
        t = cursor.fetchone()
        tanks = t[0]
        connection.commit()
        balls = soldiers + (cars * 5) + (tanks * 20)
        need = (cars * 3) + (tanks *4)
        if soldiers <= need:
            await message.answer(f"–ù–µ —Ö–≤–∞—Ç–∫–∞ –°–æ–ª–¥–∞—Ç!{soldiers - need}", reply_markup=armmy_kb)
        else:
            await message.answer(f"--–ê—Ä–º–∏—è--\n–°–æ–ª–¥–∞—Ç—ã - {soldiers - need}ü™ñ\n–ú–∞—à–∏–Ω—ã - {cars}üõª\n–¢–∞–Ω–∫–∏ - {tanks}üí•\n–ë–∞–ª–ª—ã - {balls}", reply_markup=armmy_kb)

@router.callback_query(F.data == 'sol')
async def add_soldiers(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 100)
    if acc == True:
        await add_army_slodiers(callback.from_user.id, 100, 10)
        await callback.message.answer("10 –°–æ–ª–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

async def army_accept(id, price):
    cursor.execute(f"SELECT cash FROM users WHERE user_id = {id}")
    c = cursor.fetchone()
    cash = c[0]
    if cash >= price:
        return True
    else: 
        return False
    
async def add_army_slodiers(id, price, number):
    cursor.execute("UPDATE army SET soldiers = soldiers + ? WHERE user_id = ?", (number, id))
    cursor.execute("UPDATE users SET cash = cash - ? WHERE user_id = ?", (price, id))
    connection.commit()

@router.callback_query(F.data == 'car')
async def add_—Åars(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 1000)
    if acc == True:
        await add_army_cars(callback.from_user.id, 1000, 5)
        await callback.message.answer("5 –ú–∞—à–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

async def add_army_cars(id, price, number):
    cursor.execute("UPDATE army SET cars = cars + ? WHERE user_id = ?", (number, id))
    cursor.execute("UPDATE users SET cash = cash - ? WHERE user_id = ?", (price, id))
    connection.commit()

@router.callback_query(F.data == 'tan')
async def add_tanks(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 3000)
    if acc == True:
        await add_army_tanks(callback.from_user.id, 3000, 1)
        await callback.message.answer("1 –¢–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

async def add_army_tanks(id, price, number):
    cursor.execute("UPDATE army SET tanks = tanks + ? WHERE user_id = ?", (number, id))
    cursor.execute("UPDATE users SET cash = cash - ? WHERE user_id = ?", (price, id))
    connection.commit()

def get_army(user_id):
    cursor.execute('SELECT soldiers, cars, tanks FROM army WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return {'soldiers': result[0], 'cars': result[1], 'tanks': result[2]} if result else None

def calculate_army_strength(army):
    soldiers = army['soldiers']
    cars = army['cars']
    tanks = army['tanks']
    
    needed_soldiers_for_cars = cars * 3
    needed_soldiers_for_tanks = tanks * 4
    total_needed_soldiers = needed_soldiers_for_cars + needed_soldiers_for_tanks
    
    if soldiers < total_needed_soldiers:
        return None 
    
    remaining_soldiers = soldiers - total_needed_soldiers
    strength = remaining_soldiers + (cars * 5) + (tanks * 20)
    return strength

@router.message(F.text == 'c—Ä–∞–∂–∞—Ç—å—Å—è')
async def battle(message: Message):
    if not message.reply_to_message:
        await message.answer("–°—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.")
        return
    
    user_1_id = message.from_user.id
    user_2_id = message.reply_to_message.from_user.id
    
    army_1 = get_army(user_1_id)
    army_2 = get_army(user_2_id)
    
    if not army_1 or not army_2:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä–º–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    strength_1 = calculate_army_strength(army_1)
    strength_2 = calculate_army_strength(army_2)
    
    if strength_1 is None:
        await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω–∞–º–∏ –∏ —Ç–∞–Ω–∫–∞–º–∏.")
        return
    
    if strength_2 is None:
        await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.reply_to_message.from_user.username} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω–∞–º–∏ –∏ —Ç–∞–Ω–∫–∞–º–∏.")
        return
    
    if strength_1 > strength_2:
        result_message = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {message.from_user.username}!\n–°–∏–ª–∞ –∞—Ä–º–∏–∏: {strength_1} –±–∞–ª–ª–æ–≤ –ø—Ä–æ—Ç–∏–≤ {strength_2}."
    elif strength_1 < strength_2:
        result_message = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {message.reply_to_message.from_user.username}!\n–°–∏–ª–∞ –∞—Ä–º–∏–∏: {strength_2} –±–∞–ª–ª–æ–≤ –ø—Ä–æ—Ç–∏–≤ {strength_1}."
    else:
        result_message = f"–ù–∏—á—å—è! –û–±–µ –∞—Ä–º–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å–∏–ª—É: {strength_1} –±–∞–ª–ª–æ–≤."
    
    await message.answer(result_message)

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################

@router.message(F.text == "admin")
async def adminka(message: Message):
    await message.answer("–ê–¥–º–∏–Ω–∫–∞:ü§†", reply_markup=admin_kb)

class Ban(StatesGroup):
    id = State()

@router.message(Command('ban'))
async def ban(message: Message, state: FSMContext):
    if message.from_user.id == admin:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ü™™:")
        await state.set_state(Ban.id)
    else:
        await message.reply('–¢—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü!‚ùå')

    @router.message(Ban.id)
    async def ban_id(message: Message, state: FSMContext):
        await bot.ban_chat_member(message.text, message.text, time.ctime)
        await state.clear()

@router.message(Command('ban_admin'))
async def ban_admin(message: Message, state:FSMContext):
    if message.from_user.id == admin:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—èü™™:")
        await state.set_state(Ban.id)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–∞!‚ùå")

    @router.message(Ban.id)
    async def ban_admin_True(message: Message, state: FSMContext):
        cursor.execute(f"SELECT user_id FROM admin WHERE user_id = {message.text}")
        a = cursor.fetchone()
        adma = a[0]
        if adma != None:
            cursor.execute(f"DELETE FROM admin WHERE user_id = {message.text}")
            connection.commit()
            await bot.send_message(message.text, f"–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.first_name}")
            await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!‚úÖ")
            await state.clear()
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—ÇüôÖ‚Äç‚ôÇÔ∏è")

@router.message(Command("help_admin"))
async def help_admin(message: Message):
    cursor.execute(F"SELECT user_id FROM admin WHERE user_id = {message.from_user.id}")
    a = cursor.fetchone()
    connection.commit()
    if a != None:
        await message.answer("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n/delete - –î–ª—è —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∞–º–µ—Ä–æ–≤ü§° –∏ –ø–ª–æ—Ö–∏—Ö –ª—é–¥–µ–π‚ùóÔ∏è\nban - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ–π—Ç–µ—Å—å –µ–µüíÄ")
    else:
        await message.answer('–°–ø–µ—Ä–≤–∞ –∞–¥–º–∏–Ω–æ–º —Å—Ç–∞–Ω—åüòê')

@router.message(Command('–ø–µ—Ä–µ–¥–∞—á–∞'))
async def transfer_pol(message: Message):
    if message.from_user.id == admin:
        try:
            args = message.text.split()
            if len(args) < 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /transfer <id –ø–æ–ª—É—á–∞—Ç–µ–ª—è> <—Å—É–º–º–∞> –ü—Ä–∏–º–µ—Ä /–ø–µ—Ä–µ–¥–∞—á–∞ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 100")

            receiver_id = int(args[1])
            amount = float(args[2])

            cursor.execute("SELECT cash FROM users WHERE user_id = ?", (message.from_user.id,))
            sender_cash = cursor.fetchone()
            s = sender_cash[0]

            if sender_cash is None:
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

            cursor.execute("UPDATE users SET cash = cash + ? WHERE user_id = ?", (amount, receiver_id))

            await bot.send_message(receiver_id, f'–í–∞–º –Ω–∞—Å–ª–µ–Ω–æ {amount}')

            connection.commit()
            await message.reply("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —á–∏—Ç!")

        except Exception as e:
            connection.rollback()
            await message.reply(f"–û—à–∏–±–∫–∞: {e}")
            print(e)

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################

class Kazino(StatesGroup):
    stavka = State()

@router.message(Command('kazino'))
async def kazino(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤—Éüíµ:")
    await state.set_state(Kazino.stavka)

@router.message(Kazino.stavka)
async def winorlos(message: Message, state:FSMContext):
    stavka = int(message.text)
    vygrysh = 3
    ran = random.randint(1,3)
    acc = accept_kazino(stavka, message.from_user.id)
    if acc == True:
        if ran == vygrysh:
            stavka = stavka * random.randint(1.1, 2)
            await message.answer(f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ - {stavka}!ü§ë")
            cursor.execute(f"UPDATE users SET cash = cahs + ? WHERE user_id = ?", (stavka, message.from_user.id))
            connection.commit()
            await state.clear()
        else:
            await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!üò≠, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ - {stavka}")
            cursor.execute(f"UPDATE users SET cash = cash - ? WHERE user_id = ?", (stavka, message.from_user.id))
            connection.commit()
            await state.clear()
    else:
        await message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

async def accept_kazino(stavka, idi2):
    cursor.execute(f"SELECT cash FROM users WHERE user_id = {idi2}")
    c = cursor.fetchone()
    cash = c[0]
    if cash >= stavka:
        acc = True
    else: 
        acc = False

games = {}

def create_board():
    return [[" " for _ in range(3)] for _ in range(3)]

def check_victory(board, symbol):
    for row in board:
        if row.count(symbol) == 3:
            return True
    for col in range(3):
        if [board[row][col] for row in range(3)].count(symbol) == 3:
            return True
    if [board[i][i] for i in range(3)].count(symbol) == 3 or [board[i][2 - i] for i in range(3)].count(symbol) == 3:
        return True
    return False

def check_draw(board):
    for row in board:
        if " " in row:
            return False
    return True

def display_board(board):
    return "\n".join([" | ".join(row) for row in board])

def generate_keyboard(board):
    builder = InlineKeyboardBuilder()
    for i in range(3):
        buttons = []
        for j in range(3):
            if board[i][j] == " ":
                buttons.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"move_{i},{j}"))
            else:
                buttons.append(InlineKeyboardButton(text=board[i][j], callback_data=f"taken_{i},{j}"))
        builder.row(*buttons)
    return builder.as_markup()

def bot_move(board):
    empty_cells = [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]
    return random.choice(empty_cells)

@router.message(Command("start_game"))
async def start_game(message: Message):
    games[message.chat.id] = create_board()
    await message.answer(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏ (X).\n–í–∞—à —Ö–æ–¥:\n{display_board(games[message.chat.id])}", reply_markup=generate_keyboard(games[message.chat.id]))

@router.callback_query()
async def handle_move(call: CallbackQuery):
    if not (call.data.startswith("move_") or call.data.startswith("taken_")):
        return

    game = games.get(call.message.chat.id)

    if not game:
        await call.message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if call.data.startswith("taken"):
        await call.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return

    if call.data.startswith("move"):
        i, j = map(int, call.data.split("_")[1].split(","))
        if game[i][j] != " ":
            await call.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
            return

        game[i][j] = "X"

        if check_victory(game, "X"):
            await call.message.edit_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n{display_board(game)}")
            games.pop(call.message.chat.id)
            return

        if check_draw(game):
            await call.message.edit_text(f"–ù–∏—á—å—è!\n{display_board(game)}")
            games.pop(call.message.chat.id)
            return

        bot_i, bot_j = bot_move(game)
        game[bot_i][bot_j] = "O"

        if check_victory(game, "O"):
            await call.message.edit_text(f"–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!\n{display_board(game)}")
            games.pop(call.message.chat.id)
            return

        if check_draw(game):
            await call.message.edit_text(f"–ù–∏—á—å—è!\n{display_board(game)}")
            games.pop(call.message.chat.id)
            return

        await call.message.edit_text(f"–í–∞—à —Ö–æ–¥:\n{display_board(game)}", reply_markup=generate_keyboard(game))

class Trading(StatesGroup):
    n = State()

@router.message(F.text == "Trading")
async def trading(message: Message, state:FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É–¥–∞ –ø–æ–π–¥–µ—Ç —Ä—ã–Ω–æ–∫\n–í–Ω–∏–∑üìâ\n–ù–∞–≤–≤–µ—Ä—Öüìà")
    await state.set_state(Trading.n)

@router.message(Trading.n)
async def trade(message: Message, state:FSMContext):
    choice = random.choice(['–í–Ω–∏–∑', '–ù–∞–≤–≤–µ—Ä—Ö'])
    try:
        if message.text == choice:
            win = random.randint(1000, 10000)
            await message.answer(f"–í—ã —É–≥–∞–¥–∞–ª–∏ –≤–∞—à–∞ –ø—Ä–∏–±—ã–ª—å - {win}üí∞")
            await state.clear()
        else:
            lose = random.randint(1000, 10000)
            await message.answer(f"–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ - {lose}ü•≤")
            await state.clear()
    except BaseException as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("play"))
async def play_bot(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç‚úã —è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3 –æ—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ!ü§î")
    keyboard = ReplyKeyboardBuilder()
    for i in range(1,4):
        keyboard.add(KeyboardButton(text=f'{i}'))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ: ", reply_markup=keyboard.as_markup(resize_keyboard=True))   

    @router.message(F.text.in_(['1', '2', '3']))
    async def odin(message: Message):
        user_guess = int(message.text)
        correct_number = random.randint(1, 3)
        if user_guess == correct_number:
                cursor.execute('UPDATE users SET wins = wins + ? WHERE user_id = ?', (1, message.from_user.id))
                connection.commit()
                await message.answer_photo(photo="https://pic.vjshi.com/2023-04-20/e57c2237d4bf4f64928b0d20a8c33d53/online/puzzle.jpg?x-oss-process=style/w1440_h2880")
                await message.answer("–¢—ã –≤—ã–π–≥—Ä–∞–ª!üòÑ\n/start")
        else:
            await message.answer_photo(photo="https://i.pinimg.com/600x315/60/a7/1f/60a71f48617c70eca2f990f374d1e848.jpg")
            await message.answer("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!üò¢\n/start")

################################################################################
# ################################################################################
# ################################################################################
# ################################################################################################################################################################
